// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.gva.dgti.gvgeoportal.service.batch;

import com.mysema.query.BooleanBuilder;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.path.PathBuilder;
import es.gva.dgti.gvgeoportal.domain.GestorCatalogo;
import es.gva.dgti.gvgeoportal.service.batch.GestorCatalogoBatchService;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.springframework.transaction.annotation.Transactional;

privileged aspect GestorCatalogoBatchService_Roo_GvNIXJpaBatch {
    
    public Class GestorCatalogoBatchService.getEntity() {
        return GestorCatalogo.class;
    }
    
    public EntityManager GestorCatalogoBatchService.entityManager() {
        return GestorCatalogo.entityManager();
    }
    
    @Transactional
    public int GestorCatalogoBatchService.deleteAll() {
        TypedQuery<GestorCatalogo> query = entityManager().createQuery("Select o FROM GestorCatalogo o", GestorCatalogo.class);
        List<GestorCatalogo> gestorCatalogos = query.getResultList();
        delete(gestorCatalogos);
        return gestorCatalogos.size();
    }
    
    @Transactional
    public int GestorCatalogoBatchService.deleteIn(List<Long> ids) {
        TypedQuery<GestorCatalogo> query = entityManager().createQuery("SELECT o FROM GestorCatalogo o WHERE o.id IN (:idList)", GestorCatalogo.class);
        query.setParameter("idList", ids);
        List<GestorCatalogo> gestorCatalogos = query.getResultList();
        delete(gestorCatalogos);
        return gestorCatalogos.size();
    }
    
    @Transactional
    public int GestorCatalogoBatchService.deleteNotIn(List<Long> ids) {
        TypedQuery<GestorCatalogo> query = entityManager().createQuery("SELECT o FROM GestorCatalogo o WHERE o.id NOT IN (:idList)", GestorCatalogo.class);
        query.setParameter("idList", ids);
        List<GestorCatalogo> gestorCatalogos = query.getResultList();
        delete(gestorCatalogos);
        return gestorCatalogos.size();
    }
    
    @Transactional
    public void GestorCatalogoBatchService.create(List<GestorCatalogo> gestorCatalogos) {
        for( GestorCatalogo gestorcatalogo : gestorCatalogos) {
            gestorcatalogo.persist();
        }
    }
    
    @Transactional
    public List<GestorCatalogo> GestorCatalogoBatchService.update(List<GestorCatalogo> gestorcatalogos) {
        List<GestorCatalogo> merged = new ArrayList<GestorCatalogo>();
        for( GestorCatalogo gestorcatalogo : gestorcatalogos) {
            merged.add( gestorcatalogo.merge() );
        }
        return merged;
    }
    
    public List<GestorCatalogo> GestorCatalogoBatchService.findByValues(Map<String, Object> propertyValues) {
        
        // if there is a filter
        if (propertyValues != null && !propertyValues.isEmpty()) {
            // Prepare a predicate
            BooleanBuilder baseFilterPredicate = new BooleanBuilder();
            
            // Base filter. Using BooleanBuilder, a cascading builder for
            // Predicate expressions
            PathBuilder<GestorCatalogo> entity = new PathBuilder<GestorCatalogo>(GestorCatalogo.class, "entity");
            
            // Build base filter
            for (String key : propertyValues.keySet()) {
                baseFilterPredicate.and(entity.get(key).eq(propertyValues.get(key)));
            }
            
            // Create a query with filter
            JPAQuery query = new JPAQuery(GestorCatalogo.entityManager());
            query = query.from(entity);
            
            // execute query
            return query.where(baseFilterPredicate).list(entity);
        }
        
        // no filter: return all elements
        return GestorCatalogo.findAllGestorCatalogos();
    }
    
    @Transactional
    public long GestorCatalogoBatchService.deleteByValues(Map<String, Object> propertyValues) {
        List<GestorCatalogo> gestorCatalogos = findByValues(propertyValues);
        delete(gestorCatalogos);
        return (long)gestorCatalogos.size();
    }
    
    @Transactional
    public void GestorCatalogoBatchService.delete(List<GestorCatalogo> gestorcatalogos) {
        for( GestorCatalogo gestorcatalogo : gestorcatalogos) {
            gestorcatalogo.remove();
        }
    }
    
}
