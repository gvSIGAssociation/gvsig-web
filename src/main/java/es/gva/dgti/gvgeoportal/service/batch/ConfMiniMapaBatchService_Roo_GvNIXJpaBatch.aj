// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.gva.dgti.gvgeoportal.service.batch;

import com.mysema.query.BooleanBuilder;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.path.PathBuilder;
import es.gva.dgti.gvgeoportal.domain.components.ConfMiniMapa;
import es.gva.dgti.gvgeoportal.service.batch.ConfMiniMapaBatchService;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ConfMiniMapaBatchService_Roo_GvNIXJpaBatch {
    
    public Class ConfMiniMapaBatchService.getEntity() {
        return ConfMiniMapa.class;
    }
    
    public EntityManager ConfMiniMapaBatchService.entityManager() {
        return ConfMiniMapa.entityManager();
    }
    
    @Transactional
    public int ConfMiniMapaBatchService.deleteAll() {
        TypedQuery<ConfMiniMapa> query = entityManager().createQuery("Select o FROM ConfMiniMapa o", ConfMiniMapa.class);
        List<ConfMiniMapa> confMiniMapas = query.getResultList();
        delete(confMiniMapas);
        return confMiniMapas.size();
    }
    
    @Transactional
    public int ConfMiniMapaBatchService.deleteIn(List<Long> ids) {
        TypedQuery<ConfMiniMapa> query = entityManager().createQuery("SELECT o FROM ConfMiniMapa o WHERE o.id IN (:idList)", ConfMiniMapa.class);
        query.setParameter("idList", ids);
        List<ConfMiniMapa> confMiniMapas = query.getResultList();
        delete(confMiniMapas);
        return confMiniMapas.size();
    }
    
    @Transactional
    public int ConfMiniMapaBatchService.deleteNotIn(List<Long> ids) {
        TypedQuery<ConfMiniMapa> query = entityManager().createQuery("SELECT o FROM ConfMiniMapa o WHERE o.id NOT IN (:idList)", ConfMiniMapa.class);
        query.setParameter("idList", ids);
        List<ConfMiniMapa> confMiniMapas = query.getResultList();
        delete(confMiniMapas);
        return confMiniMapas.size();
    }
    
    @Transactional
    public void ConfMiniMapaBatchService.create(List<ConfMiniMapa> confMiniMapas) {
        for( ConfMiniMapa confminimapa : confMiniMapas) {
            confminimapa.persist();
        }
    }
    
    @Transactional
    public List<ConfMiniMapa> ConfMiniMapaBatchService.update(List<ConfMiniMapa> confminimapas) {
        List<ConfMiniMapa> merged = new ArrayList<ConfMiniMapa>();
        for( ConfMiniMapa confminimapa : confminimapas) {
            merged.add( confminimapa.merge() );
        }
        return merged;
    }
    
    public List<ConfMiniMapa> ConfMiniMapaBatchService.findByValues(Map<String, Object> propertyValues) {
        
        // if there is a filter
        if (propertyValues != null && !propertyValues.isEmpty()) {
            // Prepare a predicate
            BooleanBuilder baseFilterPredicate = new BooleanBuilder();
            
            // Base filter. Using BooleanBuilder, a cascading builder for
            // Predicate expressions
            PathBuilder<ConfMiniMapa> entity = new PathBuilder<ConfMiniMapa>(ConfMiniMapa.class, "entity");
            
            // Build base filter
            for (String key : propertyValues.keySet()) {
                baseFilterPredicate.and(entity.get(key).eq(propertyValues.get(key)));
            }
            
            // Create a query with filter
            JPAQuery query = new JPAQuery(ConfMiniMapa.entityManager());
            query = query.from(entity);
            
            // execute query
            return query.where(baseFilterPredicate).list(entity);
        }
        
        // no filter: return all elements
        return ConfMiniMapa.findAllConfMiniMapas();
    }
    
    @Transactional
    public long ConfMiniMapaBatchService.deleteByValues(Map<String, Object> propertyValues) {
        List<ConfMiniMapa> confMiniMapas = findByValues(propertyValues);
        delete(confMiniMapas);
        return (long)confMiniMapas.size();
    }
    
    @Transactional
    public void ConfMiniMapaBatchService.delete(List<ConfMiniMapa> confminimapas) {
        for( ConfMiniMapa confminimapa : confminimapas) {
            confminimapa.remove();
        }
    }
    
}
