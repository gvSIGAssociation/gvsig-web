// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.gva.dgti.gvgeoportal.service.batch;

import com.mysema.query.BooleanBuilder;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.path.PathBuilder;
import es.gva.dgti.gvgeoportal.domain.GeoportalServicioWeb;
import es.gva.dgti.gvgeoportal.service.batch.GeoportalServicioWebBatchService;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.springframework.transaction.annotation.Transactional;

privileged aspect GeoportalServicioWebBatchService_Roo_GvNIXJpaBatch {
    
    public Class GeoportalServicioWebBatchService.getEntity() {
        return GeoportalServicioWeb.class;
    }
    
    public EntityManager GeoportalServicioWebBatchService.entityManager() {
        return GeoportalServicioWeb.entityManager();
    }
    
    @Transactional
    public int GeoportalServicioWebBatchService.deleteAll() {
        TypedQuery<GeoportalServicioWeb> query = entityManager().createQuery("Select o FROM GeoportalServicioWeb o", GeoportalServicioWeb.class);
        List<GeoportalServicioWeb> geoportalServicioWebs = query.getResultList();
        delete(geoportalServicioWebs);
        return geoportalServicioWebs.size();
    }
    
    @Transactional
    public int GeoportalServicioWebBatchService.deleteIn(List<Long> ids) {
        TypedQuery<GeoportalServicioWeb> query = entityManager().createQuery("SELECT o FROM GeoportalServicioWeb o WHERE o.id IN (:idList)", GeoportalServicioWeb.class);
        query.setParameter("idList", ids);
        List<GeoportalServicioWeb> geoportalServicioWebs = query.getResultList();
        delete(geoportalServicioWebs);
        return geoportalServicioWebs.size();
    }
    
    @Transactional
    public int GeoportalServicioWebBatchService.deleteNotIn(List<Long> ids) {
        TypedQuery<GeoportalServicioWeb> query = entityManager().createQuery("SELECT o FROM GeoportalServicioWeb o WHERE o.id NOT IN (:idList)", GeoportalServicioWeb.class);
        query.setParameter("idList", ids);
        List<GeoportalServicioWeb> geoportalServicioWebs = query.getResultList();
        delete(geoportalServicioWebs);
        return geoportalServicioWebs.size();
    }
    
    @Transactional
    public void GeoportalServicioWebBatchService.create(List<GeoportalServicioWeb> geoportalServicioWebs) {
        for( GeoportalServicioWeb geoportalservicioweb : geoportalServicioWebs) {
            geoportalservicioweb.persist();
        }
    }
    
    @Transactional
    public List<GeoportalServicioWeb> GeoportalServicioWebBatchService.update(List<GeoportalServicioWeb> geoportalserviciowebs) {
        List<GeoportalServicioWeb> merged = new ArrayList<GeoportalServicioWeb>();
        for( GeoportalServicioWeb geoportalservicioweb : geoportalserviciowebs) {
            merged.add( geoportalservicioweb.merge() );
        }
        return merged;
    }
    
    public List<GeoportalServicioWeb> GeoportalServicioWebBatchService.findByValues(Map<String, Object> propertyValues) {
        
        // if there is a filter
        if (propertyValues != null && !propertyValues.isEmpty()) {
            // Prepare a predicate
            BooleanBuilder baseFilterPredicate = new BooleanBuilder();
            
            // Base filter. Using BooleanBuilder, a cascading builder for
            // Predicate expressions
            PathBuilder<GeoportalServicioWeb> entity = new PathBuilder<GeoportalServicioWeb>(GeoportalServicioWeb.class, "entity");
            
            // Build base filter
            for (String key : propertyValues.keySet()) {
                baseFilterPredicate.and(entity.get(key).eq(propertyValues.get(key)));
            }
            
            // Create a query with filter
            JPAQuery query = new JPAQuery(GeoportalServicioWeb.entityManager());
            query = query.from(entity);
            
            // execute query
            return query.where(baseFilterPredicate).list(entity);
        }
        
        // no filter: return all elements
        return GeoportalServicioWeb.findAllGeoportalServicioWebs();
    }
    
    @Transactional
    public long GeoportalServicioWebBatchService.deleteByValues(Map<String, Object> propertyValues) {
        List<GeoportalServicioWeb> geoportalServicioWebs = findByValues(propertyValues);
        delete(geoportalServicioWebs);
        return (long)geoportalServicioWebs.size();
    }
    
    @Transactional
    public void GeoportalServicioWebBatchService.delete(List<GeoportalServicioWeb> geoportalserviciowebs) {
        for( GeoportalServicioWeb geoportalservicioweb : geoportalserviciowebs) {
            geoportalservicioweb.remove();
        }
    }
    
}
