// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.gva.dgti.gvgeoportal.security;

import es.gva.dgti.gvgeoportal.security.SafeProvider;
import java.io.InputStream;
import java.util.Properties;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.authentication.dao.SaltSource;
import org.springframework.security.authentication.encoding.PasswordEncoder;
import org.springframework.security.authentication.encoding.PlaintextPasswordEncoder;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetails;

privileged aspect SafeProvider_Roo_GvNIXProviderSAFE {
    
    public Properties SafeProvider.prop;
    
    public ClassLoader SafeProvider.loader;
    
    public InputStream SafeProvider.stream;
    
    public SaltSource SafeProvider.getSaltSource() {
        return this.saltSource;
    }
    
    public void SafeProvider.setSaltSource(SaltSource saltSource) {
        this.saltSource = saltSource;
    }
    
    public PasswordEncoder SafeProvider.getPasswordEncoder() {
        return this.passwordEncoder;
    }
    
    public void SafeProvider.setPasswordEncoder(PasswordEncoder passwordEncoder) {
        this.passwordEncoder = passwordEncoder;
    }
    
    public String SafeProvider.getApplicationId() {
        return this.applicationId;
    }
    
    public void SafeProvider.setApplicationId(String applicationId) {
        this.applicationId = applicationId;
    }
    
    public String SafeProvider.getEnvironment() {
        return this.environment;
    }
    
    public void SafeProvider.setEnvironment(String environment) {
        this.environment = environment;
    }
    
    public boolean SafeProvider.getMapRoles() {
        return this.mapRoles;
    }
    
    public void SafeProvider.setMapRoles(boolean mapRoles) {
        this.mapRoles = mapRoles;
    }
    
    public boolean SafeProvider.getActive() {
        return this.active;
    }
    
    public void SafeProvider.setActive(boolean active) {
        this.active = active;
    }
    
    public boolean SafeProvider.getFiltrarPorAplicacion() {
        return this.filtrarPorAplicacion;
    }
    
    public void SafeProvider.setFiltrarPorAplicacion(boolean filtrarPorAplicacion) {
        this.filtrarPorAplicacion = filtrarPorAplicacion;
    }
    
    public void SafeProvider.additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {
        Object salt = null;
        if (this.saltSource != null) {
            salt = this.saltSource.getSalt(userDetails);
        }
        if (authentication.getCredentials() == null) {
            throw new BadCredentialsException("Bad credentials: "
                + userDetails.getUsername());
        }
        String presentedPassword = authentication.getCredentials().toString();
        if (!passwordEncoder.isPasswordValid(userDetails.getPassword(),presentedPassword, salt)) {
            throw new BadCredentialsException("Bad credentials: "
                + userDetails.getUsername() + " password check");
        }
    }
    
}
