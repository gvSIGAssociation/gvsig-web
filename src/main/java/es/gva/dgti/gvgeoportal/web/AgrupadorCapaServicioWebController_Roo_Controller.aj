// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.gva.dgti.gvgeoportal.web;

import es.gva.dgti.gvgeoportal.domain.AgrupadorCapa;
import es.gva.dgti.gvgeoportal.domain.AgrupadorCapaServicioWeb;
import es.gva.dgti.gvgeoportal.domain.ServicioWeb;
import es.gva.dgti.gvgeoportal.service.domain.AgrupadorCapaService;
import es.gva.dgti.gvgeoportal.service.domain.AgrupadorCapaServicioWebService;
import es.gva.dgti.gvgeoportal.service.domain.ServicioWebService;
import es.gva.dgti.gvgeoportal.web.AgrupadorCapaServicioWebController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect AgrupadorCapaServicioWebController_Roo_Controller {
    
    @Autowired
    AgrupadorCapaService AgrupadorCapaServicioWebController.agrupadorCapaService;
    
    @Autowired
    ServicioWebService AgrupadorCapaServicioWebController.servicioWebService;
    
    @Autowired
    AgrupadorCapaServicioWebService AgrupadorCapaServicioWebController.agrupadorCapaServicioWebService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String AgrupadorCapaServicioWebController.create(@Valid AgrupadorCapaServicioWeb agrupadorCapaServicioWeb, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, agrupadorCapaServicioWeb);
            return "agrupadorcapaserviciowebs/create";
        }
        uiModel.asMap().clear();
        agrupadorCapaServicioWebService.saveAgrupadorCapaServicioWeb(agrupadorCapaServicioWeb);
        return "redirect:/agrupadorcapaserviciowebs/" + encodeUrlPathSegment(agrupadorCapaServicioWeb.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String AgrupadorCapaServicioWebController.createForm(Model uiModel) {
        populateEditForm(uiModel, new AgrupadorCapaServicioWeb());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (agrupadorCapaService.countAllAgrupadorCapas() == 0) {
            dependencies.add(new String[] { "agrupador", "agrupadorcapas" });
        }
        if (servicioWebService.countAllServiciosWeb() == 0) {
            dependencies.add(new String[] { "servicioWeb", "serviciosweb" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "agrupadorcapaserviciowebs/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String AgrupadorCapaServicioWebController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("agrupadorcapaservicioweb", agrupadorCapaServicioWebService.findAgrupadorCapaServicioWeb(id));
        uiModel.addAttribute("itemId", id);
        return "agrupadorcapaserviciowebs/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String AgrupadorCapaServicioWebController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("agrupadorcapaserviciowebs", AgrupadorCapaServicioWeb.findAgrupadorCapaServicioWebEntries(firstResult, sizeNo, sortFieldName, sortOrder));
            float nrOfPages = (float) agrupadorCapaServicioWebService.countAllAgrupadorCapaServicioWebs() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("agrupadorcapaserviciowebs", AgrupadorCapaServicioWeb.findAllAgrupadorCapaServicioWebs(sortFieldName, sortOrder));
        }
        addDateTimeFormatPatterns(uiModel);
        return "agrupadorcapaserviciowebs/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String AgrupadorCapaServicioWebController.update(@Valid AgrupadorCapaServicioWeb agrupadorCapaServicioWeb, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, agrupadorCapaServicioWeb);
            return "agrupadorcapaserviciowebs/update";
        }
        uiModel.asMap().clear();
        agrupadorCapaServicioWebService.updateAgrupadorCapaServicioWeb(agrupadorCapaServicioWeb);
        return "redirect:/agrupadorcapaserviciowebs/" + encodeUrlPathSegment(agrupadorCapaServicioWeb.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String AgrupadorCapaServicioWebController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, agrupadorCapaServicioWebService.findAgrupadorCapaServicioWeb(id));
        return "agrupadorcapaserviciowebs/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String AgrupadorCapaServicioWebController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        AgrupadorCapaServicioWeb agrupadorCapaServicioWeb = agrupadorCapaServicioWebService.findAgrupadorCapaServicioWeb(id);
        agrupadorCapaServicioWebService.deleteAgrupadorCapaServicioWeb(agrupadorCapaServicioWeb);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/agrupadorcapaserviciowebs";
    }
    
    void AgrupadorCapaServicioWebController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("agrupadorCapaServicioWeb_auditcreation_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("agrupadorCapaServicioWeb_auditlastupdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void AgrupadorCapaServicioWebController.populateEditForm(Model uiModel, AgrupadorCapaServicioWeb agrupadorCapaServicioWeb) {
        uiModel.addAttribute("agrupadorCapaServicioWeb", agrupadorCapaServicioWeb);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("agrupadorcapas", agrupadorCapaService.findAllAgrupadorCapas());
        uiModel.addAttribute("serviciosweb", servicioWebService.findAllServiciosWeb());
    }
    
    String AgrupadorCapaServicioWebController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
