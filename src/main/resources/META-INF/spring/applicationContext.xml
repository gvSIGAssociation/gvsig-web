<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  gvGeoportal is sponsored by the General Directorate for Information
  Technologies (DGTI) of the Regional Ministry of Finance and Public
  Administration of the Generalitat Valenciana (Valencian Community,
  Spain), managed by gvSIG Association and led by DISID Corporation.
  
  Copyright (C) 2016 DGTI - Generalitat Valenciana
  
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU Affero General Public License as
  published by the Free Software Foundation, either version 3 of the
  License, or (at your option) any later version.
  
  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Affero General Public License for more details.
  
  You should have received a copy of the GNU Affero General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:c="http://www.springframework.org/schema/c" xmlns:context="http://www.springframework.org/schema/context"
  xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jee="http://www.springframework.org/schema/jee"
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd         http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd">
  <!-- This will automatically locate any and all property files you have within
    your classpath, provided they fall under the META-INF/spring directory. The located
    property files are parsed and their values can then be used within application context
    files in the form of ${propertyKey}. -->
  <!-- Configuracion desde ficheros externos -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
    id="propertyConfigurer">
    <property name="locations">
      <list>
        <value>classpath:safe_client.properties</value>
        <value>classpath:gvgeoportal.properties</value>
        <value>classpath:gvgeoportal-test.properties</value>
        <value>file:${asa.conf}/gvgeoportal/gvgeoportal.properties</value>
      </list>
    </property>
    <property name="ignoreResourceNotFound" value="true" />
    <property name="searchSystemEnvironment" value="true" />
    <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
  </bean>

  <!-- Turn on AspectJ @Configurable support. As a result, any time you instantiate
    an object, Spring will attempt to perform dependency injection on that object. This
    occurs for instantiation via the "new" keyword, as well as via reflection. This is
    possible because AspectJ is used to "weave" Roo-based applications at compile time.
    In effect this feature allows dependency injection of any object at all in your system,
    which is a very useful feature (without @Configurable you'd only be able to dependency
    inject objects acquired from Spring or subsequently presented to a specific Spring
    dependency injection method). Roo applications use this useful feature in a number
    of areas, such as @PersistenceContext injection into entities. -->
  <context:spring-configured />
  <!-- This declaration will cause Spring to locate every @Component, @Repository
    and @Service in your application. In practical terms this allows you to write a POJO
    and then simply annotate the new POJO as an @Service and Spring will automatically
    detect, instantiate and dependency inject your service at startup time. Importantly,
    you can then also have your new service injected into any other class that requires
    it simply by declaring a field for your service inside the relying class and Spring
    will inject it. Note that two exclude filters are declared. The first ensures that
    Spring doesn't spend time introspecting Roo-specific ITD aspects. The second ensures
    Roo doesn't instantiate your @Controller classes, as these should be instantiated
    by a web tier application context. Refer to web.xml for more details about the web
    tier application context setup services. Furthermore, this turns on @Autowired, @PostConstruct
    etc support. These annotations allow you to use common Spring and Java Enterprise
    Edition annotations in your classes without needing to do any special configuration.
    The most commonly used annotation is @Autowired, which instructs Spring to dependency
    inject an object into your class. -->
  <context:component-scan base-package="es.gva.dgti.gvgeoportal">
    <context:exclude-filter expression=".*_Roo_.*" type="regex" />
    <context:exclude-filter expression="org.springframework.stereotype.Controller"
      type="annotation" />
  </context:component-scan>

  <!-- DB gvGeoportal PostgreSQL -->
  <tx:annotation-driven mode="aspectj" transaction-manager="transactionManager" />
  <jee:jndi-lookup id="gvGeoPortalDataSource" jndi-name="${database.jndi.name}"
    resource-ref="true" default-ref="testGvGeoPortalDataSource" />
  <bean class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
    id="entityManagerFactory">
    <property name="persistenceUnitName" value="persistenceUnit" />
    <property name="dataSource" ref="gvGeoPortalDataSource" />
    <property name="jpaProperties">
      <props>
        <prop key="hibernate.default_schema">${database.schema}</prop>
        <prop key="hibernate.dialect">${database.dialect}</prop>
      </props>
    </property>
  </bean>
  <bean class="org.springframework.orm.jpa.JpaTransactionManager" id="transactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory" />
  </bean>

  <!-- DB gvGeoportal PostgreSQL (para test) -->
  <bean autowire-candidate="false" class="org.apache.commons.dbcp.BasicDataSource"
    id="testGvGeoPortalDataSource">
    <property name="url" value="${test.database.url}" />
    <property name="username" value="${test.database.username}" />
    <property name="password" value="${test.database.password}" />
    <property name="driverClassName" value="${test.database.driverClassName}" />
  </bean>

  <jaxws:client address="${wsdl.SAFE.location}" id="safeAutenticacionClient"
    serviceClass="es.gva.dgm.ayf.war.definitions.v2u00.AutenticacionArangiPortType">
    <jaxws:outInterceptors>
      <ref bean="WSS4JOutInterceptorSAFE" />
    </jaxws:outInterceptors>
  </jaxws:client>
  <jaxws:client address="${wsdl.SAFEAutorizacion.location}" id="safeAutorizacionClient"
    serviceClass="es.gva.dgm.ayf.war.definitions.v2u00.AutorizacionPortType">
    <jaxws:outInterceptors>
      <ref bean="WSS4JOutInterceptorSAFE" />
    </jaxws:outInterceptors>
  </jaxws:client>
  <bean class="es.gva.dgti.gvgeoportal.security.ExtLoadWSS4JOutInterceptor"
    id="WSS4JOutInterceptorSAFE">
    <constructor-arg>
      <map>
        <entry key="action" value="Signature" />
        <entry key="user" value="${security.SAFE.keystore.alias}" />
        <entry key="signatureUser" value="${security.SAFE.keystore.alias}" />
        <entry key="signatureKeyIdentifier" value="DirectReference" />
        <entry key="signaturePropFile" value="${security.SAFE.propertiesPath}" />
        <entry key="passwordCallbackRef" value-ref="passwordCallbackSAFE" />
      </map>
    </constructor-arg>
    <property name="traceabilityId" value="${security.SAFE.traceabilityId}" />
  </bean>
  <bean class="es.gva.dgti.gvgeoportal.security.PasswordHandler" id="passwordCallbackSAFE">
    <property name="password" value="${security.SAFE.alias.password}" />
  </bean>
</beans>
