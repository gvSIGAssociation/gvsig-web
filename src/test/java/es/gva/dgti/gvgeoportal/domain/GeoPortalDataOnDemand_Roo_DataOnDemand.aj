// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.gva.dgti.gvgeoportal.domain;

import es.gva.dgti.gvgeoportal.domain.GeoPortal;
import es.gva.dgti.gvgeoportal.domain.GeoPortalDataOnDemand;
import es.gva.dgti.gvgeoportal.domain.SistemaCoordenadasDataOnDemand;
import es.gva.dgti.gvgeoportal.service.domain.GeoPortalService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GeoPortalDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GeoPortalDataOnDemand: @Component;
    
    private Random GeoPortalDataOnDemand.rnd = new SecureRandom();
    
    private List<GeoPortal> GeoPortalDataOnDemand.data;
    
    @Autowired
    SistemaCoordenadasDataOnDemand GeoPortalDataOnDemand.sistemaCoordenadasDataOnDemand;
    
    @Autowired
    GeoPortalService GeoPortalDataOnDemand.geoPortalService;
    
    public GeoPortal GeoPortalDataOnDemand.getNewTransientGeoPortal(int index) {
        GeoPortal obj = new GeoPortal();
        setAlias(obj, index);
        setAuditCreatedBy(obj, index);
        setAuditCreation(obj, index);
        setAuditLastUpdate(obj, index);
        setAuditLastUpdatedBy(obj, index);
        setCentro(obj, index);
        setDescripcion(obj, index);
        setFechaAlta(obj, index);
        setFechaBaja(obj, index);
        setLogo(obj, index);
        setPublicado(obj, index);
        setSubtitulo(obj, index);
        setTitulo(obj, index);
        setUrl(obj, index);
        setZoom(obj, index);
        return obj;
    }
    
    public void GeoPortalDataOnDemand.setAlias(GeoPortal obj, int index) {
        String alias = "alias_" + index;
        obj.setAlias(alias);
    }
    
    public void GeoPortalDataOnDemand.setAuditCreatedBy(GeoPortal obj, int index) {
        String auditCreatedBy = "auditCreatedBy_" + index;
        obj.setAuditCreatedBy(auditCreatedBy);
    }
    
    public void GeoPortalDataOnDemand.setAuditCreation(GeoPortal obj, int index) {
        Calendar auditCreation = Calendar.getInstance();
        obj.setAuditCreation(auditCreation);
    }
    
    public void GeoPortalDataOnDemand.setAuditLastUpdate(GeoPortal obj, int index) {
        Calendar auditLastUpdate = Calendar.getInstance();
        obj.setAuditLastUpdate(auditLastUpdate);
    }
    
    public void GeoPortalDataOnDemand.setAuditLastUpdatedBy(GeoPortal obj, int index) {
        String auditLastUpdatedBy = "auditLastUpdatedBy_" + index;
        obj.setAuditLastUpdatedBy(auditLastUpdatedBy);
    }
    
    public void GeoPortalDataOnDemand.setCentro(GeoPortal obj, int index) {
        String centro = "centro_" + index;
        obj.setCentro(centro);
    }
    
    public void GeoPortalDataOnDemand.setDescripcion(GeoPortal obj, int index) {
        String descripcion = "descripcion_" + index;
        obj.setDescripcion(descripcion);
    }
    
    public void GeoPortalDataOnDemand.setFechaAlta(GeoPortal obj, int index) {
        Calendar fechaAlta = Calendar.getInstance();
        obj.setFechaAlta(fechaAlta);
    }
    
    public void GeoPortalDataOnDemand.setFechaBaja(GeoPortal obj, int index) {
        Calendar fechaBaja = Calendar.getInstance();
        obj.setFechaBaja(fechaBaja);
    }
    
    public void GeoPortalDataOnDemand.setLogo(GeoPortal obj, int index) {
        byte[] logo = String.valueOf(index).getBytes();
        obj.setLogo(logo);
    }
    
    public void GeoPortalDataOnDemand.setPublicado(GeoPortal obj, int index) {
        Boolean publicado = true;
        obj.setPublicado(publicado);
    }
    
    public void GeoPortalDataOnDemand.setSubtitulo(GeoPortal obj, int index) {
        String subtitulo = "subtitulo_" + index;
        obj.setSubtitulo(subtitulo);
    }
    
    public void GeoPortalDataOnDemand.setTitulo(GeoPortal obj, int index) {
        String titulo = "titulo_" + index;
        obj.setTitulo(titulo);
    }
    
    public void GeoPortalDataOnDemand.setUrl(GeoPortal obj, int index) {
        String url = "url_" + index;
        obj.setUrl(url);
    }
    
    public void GeoPortalDataOnDemand.setZoom(GeoPortal obj, int index) {
        Integer zoom = new Integer(index);
        obj.setZoom(zoom);
    }
    
    public GeoPortal GeoPortalDataOnDemand.getSpecificGeoPortal(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        GeoPortal obj = data.get(index);
        Long id = obj.getId();
        return geoPortalService.findGeoPortal(id);
    }
    
    public GeoPortal GeoPortalDataOnDemand.getRandomGeoPortal() {
        init();
        GeoPortal obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return geoPortalService.findGeoPortal(id);
    }
    
    public boolean GeoPortalDataOnDemand.modifyGeoPortal(GeoPortal obj) {
        return false;
    }
    
    public void GeoPortalDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = geoPortalService.findGeoPortalEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'GeoPortal' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<GeoPortal>();
        for (int i = 0; i < 10; i++) {
            GeoPortal obj = getNewTransientGeoPortal(i);
            try {
                geoPortalService.saveGeoPortal(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
