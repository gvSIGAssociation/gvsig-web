// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package es.gva.dgti.gvgeoportal.domain.components;

import es.gva.dgti.gvgeoportal.domain.GeoPortalDataOnDemand;
import es.gva.dgti.gvgeoportal.domain.components.ConfVistasPredefinidas;
import es.gva.dgti.gvgeoportal.domain.components.ConfVistasPredefinidasDataOnDemand;
import es.gva.dgti.gvgeoportal.domain.enumerated.TipoComponente;
import es.gva.dgti.gvgeoportal.service.domain.ConfVistasPredefinidasService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ConfVistasPredefinidasDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ConfVistasPredefinidasDataOnDemand: @Component;
    
    private Random ConfVistasPredefinidasDataOnDemand.rnd = new SecureRandom();
    
    private List<ConfVistasPredefinidas> ConfVistasPredefinidasDataOnDemand.data;
    
    @Autowired
    GeoPortalDataOnDemand ConfVistasPredefinidasDataOnDemand.geoPortalDataOnDemand;
    
    @Autowired
    ConfVistasPredefinidasService ConfVistasPredefinidasDataOnDemand.confVistasPredefinidasService;
    
    public ConfVistasPredefinidas ConfVistasPredefinidasDataOnDemand.getNewTransientConfVistasPredefinidas(int index) {
        ConfVistasPredefinidas obj = new ConfVistasPredefinidas();
        setAuditCreatedBy(obj, index);
        setAuditCreation(obj, index);
        setAuditLastUpdate(obj, index);
        setAuditLastUpdatedBy(obj, index);
        setNombre(obj, index);
        setTipo(obj, index);
        return obj;
    }
    
    public void ConfVistasPredefinidasDataOnDemand.setAuditCreatedBy(ConfVistasPredefinidas obj, int index) {
        String auditCreatedBy = "auditCreatedBy_" + index;
        obj.setAuditCreatedBy(auditCreatedBy);
    }
    
    public void ConfVistasPredefinidasDataOnDemand.setAuditCreation(ConfVistasPredefinidas obj, int index) {
        Calendar auditCreation = Calendar.getInstance();
        obj.setAuditCreation(auditCreation);
    }
    
    public void ConfVistasPredefinidasDataOnDemand.setAuditLastUpdate(ConfVistasPredefinidas obj, int index) {
        Calendar auditLastUpdate = Calendar.getInstance();
        obj.setAuditLastUpdate(auditLastUpdate);
    }
    
    public void ConfVistasPredefinidasDataOnDemand.setAuditLastUpdatedBy(ConfVistasPredefinidas obj, int index) {
        String auditLastUpdatedBy = "auditLastUpdatedBy_" + index;
        obj.setAuditLastUpdatedBy(auditLastUpdatedBy);
    }
    
    public void ConfVistasPredefinidasDataOnDemand.setNombre(ConfVistasPredefinidas obj, int index) {
        String nombre = "nombre_" + index;
        obj.setNombre(nombre);
    }
    
    public void ConfVistasPredefinidasDataOnDemand.setTipo(ConfVistasPredefinidas obj, int index) {
        TipoComponente tipo = TipoComponente.class.getEnumConstants()[0];
        obj.setTipo(tipo);
    }
    
    public ConfVistasPredefinidas ConfVistasPredefinidasDataOnDemand.getSpecificConfVistasPredefinidas(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ConfVistasPredefinidas obj = data.get(index);
        Long id = obj.getId();
        return confVistasPredefinidasService.findConfVistasPredefinidas(id);
    }
    
    public ConfVistasPredefinidas ConfVistasPredefinidasDataOnDemand.getRandomConfVistasPredefinidas() {
        init();
        ConfVistasPredefinidas obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return confVistasPredefinidasService.findConfVistasPredefinidas(id);
    }
    
    public boolean ConfVistasPredefinidasDataOnDemand.modifyConfVistasPredefinidas(ConfVistasPredefinidas obj) {
        return false;
    }
    
    public void ConfVistasPredefinidasDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = confVistasPredefinidasService.findConfVistasPredefinidasEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ConfVistasPredefinidas' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ConfVistasPredefinidas>();
        for (int i = 0; i < 10; i++) {
            ConfVistasPredefinidas obj = getNewTransientConfVistasPredefinidas(i);
            try {
                confVistasPredefinidasService.saveConfVistasPredefinidas(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
